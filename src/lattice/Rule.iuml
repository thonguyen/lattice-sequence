package lattice {
    class Rule {
        -ComparableSet premise
        -ComparableSet conclusion
        .. Constructors ..
        +Rule()
        +Rule(TreeSet<Comparable> premise, TreeSet<Comparable> conclusion)
        .. Accessors ..
        +TreeSet<Comparable> getPremise()
        +TreeSet<Comparable> getConclusion()
        .. Operations ..
        +boolean addToPremise(Comparable a)
        +boolean removeFromPremise(Comparable a)
        +boolean addToConclusion(Comparable a)
        +boolean removeFromConclusion(Object a)
        +boolean addAllToPremise(Collection<Comparable> a)
        +boolean removeAllFromPremise(Collection<Comparable> a)
        +boolean addAllToConclusion(Collection<Comparable> a)
        +boolean removeAllFromConclusion(Collection<Comparable> a)
        .. Transformers ..
        +String toString()
        .. Comparators ..
        +int hashCode()
        +boolean equals(Object o)
        +int compareTo(Object o)
    }
}
